스프링부트 핵심가이드 - 10/30일
<6장>
<DTO 객체를 활용한 GET 메서드 구현>
* DTO란?
 - DTO는 Data Transfer Object의 약자로, 다른 레이언 간의 데이터 교환에 활용
 - 각 클래스 및 인터페이스를 호출하면서 전달하는 매개변수로 사용되는 데이터 객체
 - DTO는 데이터를 교환하는 용도로만 사용하는 객체이기 때문에 DTO에는 별도의 로직이 포함되지 않음


<6장>
□ ORM
 - 객체 관계 매핑을 의미(객체와 RDB의 테이블을 자동으로 매핑)

□ ORM의 장점
 - ORM을 사용하면서 데이터베이스 쿼리를 객체지향적으로 조작할 수 있음 (쿼리문 작성 양이 줄어들어 개발 비용이 줄어듦, 가독성을 높여줌)
 - 재사용 및 유지보수가 편리 (ORM을 통해 매핑된 객체는 모두 독립적으로 작성되어 있어 재사용이 용이)
 - 데이터베이스에 대한 종속성이 줄어듦 (객체를 기반으로 데이터베이스 테이블을 관리하기 때문에 데이터베이스에 종속적이지 않음)

□  ORM의 단점
 - ORM만으로는 완전한 서비스를 구현하기에 한계 존재 (복잡한 서비스의 경우 직접 쿼리를 구현하지 않고는 코드로 구현하기 어려움)
 - 애플리케이션의 객체 관점과 데이터베이스의 관계 관점의 불일치 발생

□ JPA
 - 개발자 대신 적절한 SQL을 생성하고 데이터베이스를 조작해서 객체를 자동 매핑하는 역할 수행
 - JPA 기반의 구현체는 3가지 존재 ('하이버네이트', 이클립스 링크, 데이터 뉴클리어스)

□ 하이버네이트
 - 자바의 ORM 프레임워크로, JPA가 정의하는 인터페이스를 구현하고 있는 JPA 구현체 중 하나

 * Spring Data JPA
 - JPA를 편리하게 사용할 수 있도록 지원하는 스프링 하위 프로젝트 중 하나
  - CRUD 처리에 필요한 인터페이스를 제공하고, 하이버네이트의 엔티티 매니저를 직접 다루지 않고 리포지토리를 정의해 사용함으로써 스프링이 적합한 쿼리를 능동적으로 생성하는 방식으로 데이터베이스를 조작